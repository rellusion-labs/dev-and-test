# Changelog

## [1.5] - 2021-01-04
### Netcode
- Connection request messages sent via Host.Connect are now correctly received
- Allocator.ReturnSent no longer throws an exception
- ObjectDisposedException is no longer reported when expected
- Removed null reference exceptions that would occur during peer disposal
- Writer.Reset method is no longer public
- Reader now checks for message overflows via the new CheckAvailableSpace method
- Added Reader.Reset method for setting read position within the message
- Added Reader.First, Reader.Last and Reader.Position properties
- Added synchronous IPResolver.Resolve methods
- ArrayPool and ObjectPool now allow zero length pools
- Host.Allocator is now public
- Removed Message and NetworkMessage structs to discourage delegate allocation
- Added static Host.IsLocal and Host.IsPortUsed methods for checking local connections
- Added IPResolver.GetLocalAddressIPv6 method for IPv6 LAN connections
- Host.LocalEndPoint renamed to Host.BindAddress
- Rejecting a ConnectionRequest now disposes it too so it cannot be accepted anymore
- When Peer.Disconnect is called twice in a row it will now properly disconnect
### Unity
- NetworkHost.Startup now returns a bool indicating success
- Replaced NetworkHost.LocalEndPoint with NetworkHost.GetBindAddress
- Added NetworkHost.GetLocalAddress and NetworkHost.GetLoopbackAddress
- Added NetworkHost.Connect method with IPEndPoint, IPeerListener and IWritable
- Added NetworkHost.Dispose method for disposing the host
- Added NetworkHost.PeerEvents and NetworkHost.HostEvents
- NetworkSpawnerEditor no longer throws an exception if prefab is not assigned
- NetworkHost and NetworkManager now detach from parents for persistence acrosss scenes
- NetworkHost no longer freezes Unity when OnDestroy is called
- Added NetworkHost.ReplaceListener to replace peer event listeners
- Added NetworkHost.SetTracking to add or remove component tracking for peers
- Added another NetworkSpawner.Spawn, both methods now return an instance
- NetworkComponent.SendNetworkMessageAll now only has a single exclude peer
- Added NetworkAnimator.SyncParameters and NetworkAnimator.SyncStates
- Components now use message structs
### Examples
- P2P Example now compiles without a warning
- Chat, Broadcast and Arena examples now use struct messages to reduce allocations
- Rewritten Arena example to use unity components
- Added server side physics objects to Arena example

## [1.4] - 2020-12-14
### Netcode
- Namespace moved from SuperNet to SuperNet.Netcode
- Reader.Buffer field is now public instead of internal
- Peer.Disconnect no longer throws an exception if disposed
### Unity
- NetworkComponent.ResetNetworkIdentity now compiles without editor
- New assembly definitions SuperNetEditor, SuperNetNetcode and SuperNetUnity

## [1.3] - 2020-11-12
### Netcode
- HostConfig and PeerConfig are now serializable
- PeerConfig.RemotePublicKey and HostConfig.PrivateKey are now ignored if they are empty strings
- Peer.Dispose and Host.Dispose now notify the listener asynchronously
- Host.Connect and Host.Accept now start connectiong asynchronously
- Host socket BeginReceiveFrom/EndReceiveFrom replaced with ReceiveFromAsync
- Host socket BeginSendTo/EndSendTo replaced with SendToAsync
- Added SocketAsyncEventArgs pool to Allocator
- Added Message struct to allow sending messages without implementing IMessage
- IMessage now includes timestamp offset
- Renamed IMessage.cs to Message.cs
- Added Timed, Reliable, Ordered and Unique fields to MessageReceived and MessageSent handles
- Fixed ObjectPool.Return method sometimes crashing due to negative index
- Fixed packet fragmentation sometimes not sending the last fragment
- Fixed send exception when encryption is enabled locally but not remotely
- Fixed IL2CPP builds for phones by removing when on exception catching
### Unity Core
- Created NetworkHost for establishing connections
- Created NetworkChannels to define all message channels
- Created NetworkManager singleton for registering components
- Created NetworkComponent base for all components
- Created NetworkIdentity to identify components over the network
- Created NetworkMessage for components to send
- Created NetworkMirrorTransport for mirror networking support
### Unity Components
- Created NetworkTransform for synchronizing transforms and rigidbodies
- Created NetworkAnimation for synchronizing legacy animations
- Created NetworkAnimator for synchronizing mecanim animators
- Created NetworkSpawner and NetworkPrefab for spawning components

## [1.2] - 2020-08-09
### Netcode
- Peers now keep the connection open for a short while after receiving a disconnect request
- All allocations across all peers on the host are now pooled via a single Allocator instance
- Added ICryptoRandom and CryptoRandom to reuse the random number generator
- CryptoRSA is now lazy-initialized to avoid initialization when authentication isn't used
- Added inline Curve25519 methods for key generation to avoid extra allocations
- IPResolver async methods can now be cancelled with a token
- IPResolver GetLocalAddress now takes a port and constructs an IPEndPoint
- Writer and Reader now compile on all Unity platforms
- Added Encrypted and Authenticate fields to ConnectionRequest
- Connection requests can now be accepted regardless of their encryption status
- A disposed connection request can now still be rejected
- Host ticks are no longer in unix time
- Added internal access modifier to internal fields and methods
- Added SuperNet assembly definition to prevent access to internal fields and methods
- Exception messages now include extra information with string.Format()
- MessageSent.SendCount renamed to Attempts
- All spawned tasks now use PreferFairness to reduce latency
### Events
- Added OnHostShutdown event
- OnPeerUpdateRTT doesn't have old rtt anymore
- Removed ticks from OnHostReceiveUnconnected and OnHostReceiveBroadcast events
### PeerConfig
- New DisconnectDelay value controlling how long a connection stays open after a disconnect
- Removed BuffersExpandLength, BuffersMaxLength, ReceivePoolCount values in favor of the new Allocator
- Removed FragmentMaxCount, FragmentMaxLength values in favor of the new Allocator
### HostConfig
- Removed BuffersExpandLength, BuffersMaxLength, ReceivePoolLength values in favor of the new Allocator
- Removed Authenticator, Compressor, Exchanger values in favor of internal initialization
- Removed Authentication value (now automatically enabled if public or private keys are set)
- Removed UnconnectedTimed (now always disabled as ticks are inaccurate)
- Renamed ReceivePoolCount to ReceiveCount as it has nothing to do with the array pool anymore
- Five new allocator values
- New ReceiveMTU value
### Examples & Documentation
- Added chat server program that can be compiled without Unity
- Arena example rewritten with easier to understand code
- Arena relay program now has cleaner console output

## [1.1] - 2020-07-27
### Netcode
- IPResolver async methods now use DNS.GetHostAddressesAsync
- Added IPResolver method to get the local (LAN) IPAddress
- Removed MessageType from the MessageReceived handle as it was always MessageType.Custom
- Ordered reliable messages that come out of order are now properly reassembled back into order
- New PeerConfig.OrderedDelayMax and PeerConfig.OrderedDelayTimeout configuration values
- Fixed bug where broadcast didn't work with CRC32 enabled
### Examples & Documentation
- Created changelog and readme
- Moved all examples into the SuperNet.Examples namespace
- New Chat example with separate server and client scenes
- New P2P example showcasing UDP hole punching for P2P connections
- New Broadcast example showcasing host discovery on LAN networks
- Arena relay now sends local IP for servers on the same IP instead of 127.0.0.1

## [1.0] - 2020-07-23
- Initial release
